generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Movie {
  movieId       String     @unique @default(uuid()) @db.Char(36)
  title         String     @db.VarChar(255)
  year          String     @db.VarChar(4)
  rated         String     @db.VarChar(10)
  released      String     @db.VarChar(20)
  runtime       String     @db.VarChar(10)
  plot          String     @db.Text
  language      String     @db.VarChar(50)
  awards        String     @db.VarChar(255)
  poster        String     @db.VarChar(255)
  metascore     String     @db.VarChar(5)
  rating        String     @db.VarChar(5)
  votes         String     @db.VarChar(15)
  boxOffice     String     @db.VarChar(50)
  production    String     @db.VarChar(50)
  website       String     @db.VarChar(255)
  countries     MovieCountry[]
  genres        MovieGenre[]
  directors     MovieDirector[]
  writers       MovieWriter[]
  actors        MovieActor[]
  watchlist     Watchlist[]
  review        Review[]
}

model Country {
  countryId     String      @id @default(uuid()) @db.Char(36)
  countryName   String      @unique  @db.VarChar(100)
  movies        MovieCountry[]
}

model MovieCountry {
  movieId       String      @db.Char(36)
  countryId     String      @db.Char(36)
  movie         Movie       @relation(fields: [movieId], references: [movieId])
  country       Country     @relation(fields: [countryId], references: [countryId])

  @@unique([movieId, countryId])
}

model Genre {
  genreId       String      @id @default(uuid()) @db.Char(36)
  gereName      String      @unique @db.VarChar(50)
  movies        MovieGenre[]
}

model MovieGenre {
  movieId       String      @db.Char(36)
  genreId       String      @db.Char(36)
  movie         Movie       @relation(fields: [movieId], references: [movieId])
  genre         Genre       @relation(fields: [genreId], references: [genreId])

  @@unique([movieId, genreId])
}

model Director {
  directorId    String      @id @default(uuid()) @db.Char(36)
  directorName  String      @unique @db.VarChar(50)
  movies        MovieDirector[]
}

model MovieDirector {
  movieId       String      @db.Char(36)
  directorId    String      @db.Char(36)
  movie         Movie       @relation(fields: [movieId], references: [movieId])
  director      Director    @relation(fields: [directorId], references: [directorId])

  @@unique([movieId, directorId])
}

model Writer {
  writerId      String      @id @default(uuid()) @db.Char(36)
  writerName    String      @unique @db.VarChar(50)
  movies        MovieWriter[]
}

model MovieWriter {
  movieId       String      @db.Char(36)
  writerId      String      @db.Char(36)
  movie         Movie       @relation(fields: [movieId], references: [movieId])
  writer        Writer      @relation(fields: [writerId], references: [writerId])

  @@unique([movieId, writerId])
}

model Actor {
  actorId       String      @id @default(uuid()) @db.Char(36)
  actorName     String      @unique @db.VarChar(50)
  movies        MovieActor[]
}

model MovieActor {
  movieId       String      @db.Char(36)
  actorId       String      @db.Char(36)
  movie         Movie       @relation(fields: [movieId], references: [movieId])
  actor         Actor       @relation(fields: [actorId], references: [actorId])

  @@unique([movieId, actorId])
}

model User {
  userEmail     String      @unique @db.VarChar(255)
  userName      String      @unique @db.VarChar(50)
  firstName     String?     @db.VarChar(50)
  lastName      String?     @db.VarChar(50)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  watchlist     Watchlist[]
  review        Review[]
}

model Watchlist {
  watchlistId   String      @id @default(uuid()) @db.Char(36)
  userName      String      @db.VarChar(50)
  movieId       String      @db.Char(36)
  user          User        @relation(fields: [userName], references: [userName])
  movie         Movie       @relation(fields: [movieId], references: [movieId])

  @@unique([userName, movieId])
}

model Review {
  reviewId      String      @id @default(uuid()) @db.Char(36)
  userName      String      @unique @db.VarChar(50)
  user          User        @relation(fields: [userName], references: [userName])
  movieId       String      @db.Char(36)
  movie         Movie       @relation(fields: [movieId], references: [movieId])
  rating        String      @db.VarChar(5)
  title         String      @db.VarChar(255)
  description   String      @db.Text

  @@unique([userName, movieId])
}