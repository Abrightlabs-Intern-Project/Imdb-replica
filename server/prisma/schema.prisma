generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Movie {
  movieId       String      @id @default(uuid()) @db.Char(36)
  title         String      @db.VarChar(255)
  year          String      @db.VarChar(4)
  rated         String      @db.VarChar(10)
  released      String      @db.VarChar(20)
  runtime       String      @db.VarChar(10)
  plot          String      @db.Text
  language      String      @db.VarChar(150)
  awards        String      @db.VarChar(255)
  poster        String      @db.VarChar(255)
  trailer       String      @db.VarChar(255)
  metascore     String      @db.VarChar(5)
  rating        String      @db.VarChar(5)
  votes         String      @db.VarChar(15)
  boxOffice     String      @db.VarChar(50)
  countries     Country[]
  genres        Genre[]
  directors     Director[]
  writers       Writer[]
  actors        Actor[]
  watchlist     Watchlist[]
  review        Review[]
}

model Country {
  countryId     String      @id @default(uuid()) @db.Char(36)
  countryName   String      @unique  @db.VarChar(100)
  movies        Movie[]
}

model Genre {
  genreId       String      @id @default(uuid()) @db.Char(36)
  genreName     String      @unique @db.VarChar(50)
  movies        Movie[]
  users         User[]   
}

model Director {
  directorId    String      @id @default(uuid()) @db.Char(36)
  directorName  String      @unique @db.VarChar(50)
  movies        Movie[]
}


model Writer {
  writerId      String      @id @default(uuid()) @db.Char(36)
  writerName    String      @unique @db.VarChar(50)
  movies        Movie[]
}

model Actor {
  actorId       String      @id @default(uuid()) @db.Char(36)
  actorName     String      @unique @db.VarChar(50)
  imageUrl      String      @db.Text
  movies        Movie[]
}

model User {
  userId        String      @id @db.Char(36)
  userName      String      @unique @db.VarChar(255)
  createdAt     DateTime    @default(now())
  favouriteGenreId String?  @db.Char(36)
  genre         Genre?      @relation(fields: [favouriteGenreId], references: [genreId])
  watchlist     Watchlist[]
  review        Review[]
}

model Watchlist {
  watchlistId   String      @id @default(uuid()) @db.Char(36)
  userId        String      @db.Char(36)
  movieId       String      @db.Char(36)
  user          User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  movie         Movie       @relation(fields: [movieId], references: [movieId], onDelete: Cascade)

  @@unique([userId, movieId])
}

model Review {
  reviewId      String    @id @default(uuid()) @db.Char(36)
  rating        String    @db.VarChar(5)
  title         String    @db.VarChar(255)
  description   String    @db.Text
  createdAt     DateTime  @default(now())
  userId        String    @db.Char(36)
  movieId       String    @db.Char(36)
  user          User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  movie         Movie     @relation(fields: [movieId], references: [movieId], onDelete: Cascade)

  @@unique([userId, movieId])
}
